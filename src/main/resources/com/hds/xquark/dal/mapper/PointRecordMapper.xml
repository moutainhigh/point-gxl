<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hds.xquark.dal.mapper.PointRecordMapper">
  <resultMap id="BaseResultMap" type="com.hds.xquark.dal.model.PointRecord">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="cpId" jdbcType="BIGINT" property="cpId"/>
    <result column="grade_id" jdbcType="BIGINT" property="gradeId"/>
    <result column="gradeNumber" jdbcType="VARCHAR" property="codeNumber"/>
    <result column="orderid" jdbcType="VARCHAR" property="businessId"/>
    <result column="current_point" jdbcType="BIGINT" property="currentPoint"/>
    <result column="current_freezed_point" jdbcType="BIGINT" property="currentFreezedPoint"/>
    <result column="trancd" jdbcType="VARCHAR" property="trancd"/>
    <result column="source" jdbcType="INTEGER" property="source"/>
    <result column="belongingTo" jdbcType="INTEGER" property="belongingTo"/>
    <result column="rollbacked" jdbcType="TINYINT" property="rollbacked"/>
    <result column="rollback_id" jdbcType="BIGINT" property="rollbackId"/>
    <result column="un_freeze_id" jdbcType="BIGINT" property="unFreezeId"/>
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt"/>
    <result column="freezed_at" jdbcType="TIMESTAMP" property="freezedAt"/>
    <result column="freezed_to" jdbcType="TIMESTAMP" property="freezedTo"/>
  </resultMap>
  <resultMap id="VOResultMap" type="com.hds.xquark.dal.vo.PointRecordVO">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="cpId" jdbcType="BIGINT" property="cpId"/>
    <result column="user_name" jdbcType="VARCHAR" property="userName"/>
    <result column="grade_id" jdbcType="BIGINT" property="gradeId"/>
    <result column="grade_desc" jdbcType="VARCHAR" property="gradeDesc"/>
    <result column="gradeNumber" jdbcType="VARCHAR" property="codeNumber"/>
    <result column="orderid" jdbcType="VARCHAR" property="businessId"/>
    <result column="current_point" jdbcType="DECIMAL" property="currentPoint"/>
    <result column="current_freezed_point" jdbcType="DECIMAL" property="currentFreezedPoint"/>
    <result column="source" jdbcType="VARCHAR" property="source"/>
    <result column="belongingTo" jdbcType="INTEGER" property="belongingTo"/>
    <result column="rollbacked" jdbcType="TINYINT" property="rollbacked"/>
    <result column="trancd" jdbcType="VARCHAR" property="recordType"/>
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt"/>
  </resultMap>
  <sql id="Base_Column_List">
    id, cpId, grade_id, gradeNumber, orderid, current_point, current_freezed_point, trancd, source, belongingTo,
    rollbacked, rollback_id, un_freeze_id, created_at, updated_at, freezed_at, freezed_to
  </sql>
  <sql id="Join_Column_List">
    record.id, record.cpId, record.grade_id, record.gradeNumber,
    record.orderid, record.current_point, record.current_freezed_point,
    record.trancd, record.source, record.belongingTo, record.rollbacked, record.rollback_id, record.un_freeze_id,
    record.created_at, record.updated_at, record.freezed_at, record.freezed_to
  </sql>
  <select id="selectByPrimaryKey" parameterType="String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending
    where id = #{id,jdbcType=BIGINT}
    and isdeleted = false
  </select>
  <select id="listByUserId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending
    where user_id = #{userId}
    and isdeleted = false
    order by created_at ${direction}
  </select>
  <select id="listByCpId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending
    where cpId in (
    select cpId from xquark_user where union_id = #{unionId,jdbcType=VARCHAR}
    and archive = false
    )
    and isdeleted = false
    order by created_at ${direction}
  </select>

  <select id="loadUnRollBackedByUserIdWithBizId" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from xquark_point_record
    where user_id = #{userId}
    and business_id = #{bizId,jdbcType=VARCHAR}
    and rollbacked = false
    and isdeleted = false
    order by created_at desc
    limit 1
  </select>
  <select id="loadUnRollBackedByUserIdWithBizIdAndFCode" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending
    where user_id = #{userId}
    and business_id = #{bizId,jdbcType=VARCHAR}
    and function_code = #{functionCode,jdbcType=VARCHAR}
    and rollbacked = false
    and isdeleted = false
    order by created_at desc
  </select>
  <select id="listVO" resultMap="VOResultMap">
    select
    <include refid="Join_Column_List"/>,
    user.namecn as user_name,
    cod.description as grade_desc
    from pointsuspending record
    inner join customerProfile user on record.cpId = user.cpId
    left join gradeCode cod on cod.id = record.grade_id
    where user.cpId = #{cpId,jdbcType=BIGINT}
    and user.isdeleted = false
    and record.isdeleted = false
    <if test="source != null">
      and record.source = #{source,jdbcType=INTEGER}
    </if>
    order by record.created_at desc
    <if test="offset != null and size != null">
      limit #{offset}, #{size}
    </if>
  </select>
  <select id="listVOAsst" resultMap="VOResultMap">
    select quaPoint.id,
    quaPoint.cpId,
    quaPoint.grade_id,
    quaPoint.gradeNumber,
    quaPoint.orderid,
    quaPoint.current_point,
    quaPoint.current_freezed_point,
    quaPoint.trancd,
    quaPoint.source,
    quaPoint.rollbacked,
    quaPoint.rollback_id,
    quaPoint.created_at,
    quaPoint.updated_at,
    cp.namecn as user_name,
    gc.description as grade_desc
    from (select id,
    cpId,
    grade_id,
    gradeNumber,
    orderid,
    current_point,
    current_freezed_point,
    trancd,
    source,
    rollbacked,
    rollback_id,
    created_at,
    updated_at
    from pointsuspending
    where cpId = #{cpId,jdbcType=BIGINT}
    <if test="source != null">
      and source = #{source,jdbcType=INTEGER}
    </if>
    and isdeleted = false
    and trancd != 'DEDUCT_P'
    union
    select id,
    cpId,
    grade_id,
    gradeNumber,
    orderid,
    current_point,
    0 as 'current_freezed_point',
    trancd,
    source,
    rollbacked,
    rollback_id,
    created_at,
    updated_at
    from pointsuspendingAsst
    where cpId = #{cpId,jdbcType=BIGINT}
    <if test="source != null">
      and source = #{source,jdbcType=INTEGER}
    </if>
    and isdeleted = false
    and trancd = 'DEDUCT_P') quaPoint
    inner join customerProfile cp on quaPoint.cpId = cp.cpId
    inner join gradeCode gc on quaPoint.grade_id = gc.id
    where cp.isdeleted = false
    order by quaPoint.created_at desc
    <if test="offset != null and size != null">
      limit #{offset}, #{size}
    </if>
  </select>
  <select id="count" resultType="java.lang.Long">
    select count(*)
    from pointsuspending record
    inner join customerprofile user on record.cpId = user.cpId
    where user.cpId = #{cpId,jdbcType=BIGINT}
    and user.isdeleted = false
    and record.isdeleted = false
    <if test="source != null">
      and record.source = #{source,jdbcType=INTEGER}
    </if>
  </select>
  <select id="listFreezedRecordAfterDate" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending where
    freezed_at >= #{date,jdbcType=TIMESTAMP}
    and isdeleted = false
  </select>
  <select id="listUnFreezedRecord" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending
    where (current_freezed_point is not null and current_freezed_point > 0)
    and un_freeze_id is null
    and rollbacked = false
    and freezed_to &lt;= NOW()
    and isdeleted = false
  </select>
  <select id="loadUnRollBackedByCpIdWithBizId"
    resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending
    where cpId = #{cpId,jdbcType=BIGINT}
    and orderid = #{bizId,jdbcType=VARCHAR}
    and rollbacked = false
    order by created_at desc
    and isdeleted = false
    limit 1
  </select>
  <select id="listUnRollBackedByCpIdWithBizIdAndType"
    resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from pointsuspending
    where cpId = #{cpId,jdbcType=BIGINT}
    and orderid = #{bizId,jdbcType=VARCHAR}
    and rollbacked = false
    and trancd = #{type,jdbcType=VARCHAR}
    and isdeleted = false
    order by created_at desc
  </select>
  <select id="selectRecordExists" resultType="java.lang.Boolean">
    select exists(
             select 1
             from pointsuspending
             where cpId = #{cpId,jdbcType=BIGINT}
               and orderid = #{bizId,jdbcType=VARCHAR}
               and trancd = #{type,jdbcType=VARCHAR}
               and isdeleted = false
             )
  </select>
  <select id="sumByTrancd" resultType="java.math.BigDecimal">
    select sum(current_point)
    from pointsuspending
    where cpid = #{cpId,jdbcType=BIGINT}
    and trancd = #{trancd,jdbcType=VARCHAR}
    and isdeleted = false
  </select>
  <update id="deleteByPrimaryKey" parameterType="java.lang.Long">
    update pointsuspending
    set isdeleted = true
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="insert" parameterType="com.hds.xquark.dal.model.PointRecord">
    <selectKey keyProperty="id" resultType="long">
      SELECT LAST_INSERT_ID() AS id
    </selectKey>
    insert into pointsuspending (
    id, cpId, grade_id, gradeNumber, orderid, current_point, current_freezed_point,
    trancd, source, belongingTo, rollbacked, rollback_id, un_freeze_id, created_at, updated_at,
    freezed_at,
    freezed_to
    )
    values
    (#{id,jdbcType=BIGINT}, #{cpId,jdbcType=BIGINT},
    #{gradeId,jdbcType=BIGINT},
    #{codeNumber,jdbcType=VARCHAR},
    #{businessId,jdbcType=VARCHAR},
    #{currentPoint,jdbcType=BIGINT},
    #{currentFreezedPoint,jdbcType=BIGINT},
    #{trancd,jdbcType=VARCHAR},
    #{source,jdbcType=BIGINT},
    #{belongingTo,jdbcType=TINYINT},
    false,
    #{rollbackId,jdbcType=BIGINT},
    #{unFreezeId,jdbcType=BIGINT},
    NOW(), NOW(), #{freezedAt,jdbcType=TIMESTAMP},
    #{freezedTo,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hds.xquark.dal.model.PointRecord">
    update pointsuspending
    <set>
      <if test="cpId != null">
        cpId = #{cpId,jdbcType=BIGINT},
      </if>
      <if test="gradeId != null">
        grade_id = #{gradeId,jdbcType=BIGINT},
      </if>
      <if test="codeNumber != null">
        gradeNumber = #{codeNumber,jdbcType=VARCHAR},
      </if>
      <if test="businessId != null">
        orderid = #{businessId,jdbcType=VARCHAR},
      </if>
      <if test="currentPoint != null">
        current_point = #{currentPoint,jdbcType=BIGINT},
      </if>
      <if test="currentFreezedPoint != null">
        current_freezed_point = #{currentFreezedPoint,jdbcType=BIGINT},
      </if>
      <if test="trancd != null">
        trancd = #{trancd,jdbcType=VARCHAR},
      </if>
      <if test="source != null">
        source = #{source,jdbcType=INTEGER},
      </if>
      <if test="belongingTo != null">
        belongingTo = #{belongingTo,jdbcType=TINYINT},
      </if>
      <if test="rollbacked != null">
        rollbacked = #{rollbacked,jdbcType=TINYINT},
      </if>
      <if test="rollbackId != null">
        rollback_id = #{rollbackId,jdbcType=BIGINT},
      </if>
      <if test="unFreezeId != null">
        un_freeze_id = #{unFreezeId,jdbcType=BIGINT},
      </if>
      <if test="freezedAt != null">
        freezed_at = #{freezedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="freezedTo != null">
        freezed_to = #{freezedTo,jdbcType=TIMESTAMP},
      </if>
      updated_at = NOW()
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hds.xquark.dal.model.PointRecord">
    update pointsuspending
    set cpId                  = #{cpId,jdbcType=BIGINT},
        grade_id              = #{gradeId,jdbcType=BIGINT},
        gradeNumber           = #{codeNumber,jdbcType=VARCHAR},
        orderid               = #{businessId,jdbcType=VARCHAR},
        current_point         = #{currentPoint,jdbcType=BIGINT},
        current_freezed_point = #{currentFreezedPoint,jdbcType=BIGINT},
        trancd                = #{trancd,jdbcType=VARCHAR},
        source                = #{source,jdbcType=BIGINT},
        belongingTo           = #{belongingTo,jdbcType=TINYINT},
        rollbacked            = #{rollbacked,jdbcType=TINYINT},
        rollback_id           = #{rollbackId,jdbcType=BIGINT},
        un_freeze_id          = #{unFreezeId,jdbcType=BIGINT},
        freezed_at            = #{freezedAt,jdbcType=TIMESTAMP},
        freezed_to            = #{freezedTo,jdbcType=TIMESTAMP},
        updated_at            = NOW()
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>